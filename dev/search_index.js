var documenterSearchIndex = {"docs":
[{"location":"examples/disk_kerr/#Thin-disk-around-a-Kerr-black-hole","page":"Thin disk around a Kerr black hole","title":"Thin disk around a Kerr black hole","text":"","category":"section"},{"location":"examples/disk_kerr/","page":"Thin disk around a Kerr black hole","title":"Thin disk around a Kerr black hole","text":"using Skylight\nusing CairoMakie\n\nspacetime = KerrSpacetimeBoyerLindquistCoordinates(M = 1.0, a = 0.9)\n\ncamera = ImagePlane(distance = 500.0,\n    observer_inclination_in_degrees = 90,\n    horizontal_side = 23.0,\n    vertical_side = 23.0,\n    horizontal_number_of_pixels = 100,\n    vertical_number_of_pixels = 100)\n\nmodel = NovikovThorneDisk(inner_radius = isco_radius(spacetime), outer_radius = 18.0)\n\nconfigurations = VacuumOTEConfigurations(spacetime = spacetime,\n    camera = camera,\n    radiative_model = model,\n    unit_mass_in_solar_masses = 1.0)\n\ninitial_data = initialize(configurations)\n\ncb, cbp = callback_setup(configurations; rhorizon_bound = 2e-1) #... or, define your own cb and cbp\n\nrun = integrate(initial_data,\n    configurations,\n    cb,\n    cbp;\n    method = VCABM(),\n    reltol = 1e-13,\n    abstol = 1e-21)\n\noutput_data = run.output_data\n\nIobs = observed_bolometric_intensities(initial_data, output_data, configurations)\n\nxs, ys = axes_ranges(camera)\n\nzs = grid_view(Iobs, configurations)\n\nfig = Figure(font = \"CMU Serif\")\nax = Axis(fig[1, 1],\n    xlabel = L\"\\alpha\",\n    ylabel = L\"\\beta\",\n    ylabelsize = 26,\n    xlabelsize = 26)\nhmap = heatmap!(xs, ys, zs / maximum(zs); colormap = :gist_heat, interpolate = true)\nColorbar(fig[:, end + 1],\n    hmap,\n    label = L\"I\",\n    labelsize = 26,\n    width = 15,\n    ticksize = 18,\n    tickalign = 1)\ncolsize!(fig.layout, 1, Aspect(1, 1.0))\ncolgap!(fig.layout, 7)\nCairoMakie.save(\"plot.png\", fig)","category":"page"},{"location":"spacetimes/othertypes/#Abstract-types-and-traits","page":"Abstract types and traits","title":"Abstract types and traits","text":"","category":"section"},{"location":"spacetimes/othertypes/","page":"Abstract types and traits","title":"Abstract types and traits","text":"Modules = [Skylight]\nPages = [\"spacetimes/types.jl\"]\nFilter = t -> typeof(t) === DataType ","category":"page"},{"location":"spacetimes/othertypes/#Skylight.AbstractBlackHoleSpacetime","page":"Abstract types and traits","title":"Skylight.AbstractBlackHoleSpacetime","text":"AbstractBlackHoleSpacetime <: AbstractSpacetime\n\nSupertype for representing spacetimes containing black holes. \n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.AbstractChristoffelCache","page":"Abstract types and traits","title":"Skylight.AbstractChristoffelCache","text":"AbstractSpacetimeCache\n\nAbstract type for cache objects to be used as temporary storage in Christoffel symbol calculations.\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.AbstractCoordinatesTopology","page":"Abstract types and traits","title":"Skylight.AbstractCoordinatesTopology","text":"AbstractCoordinatesTopology\n\nAbstract type for representing the topology of the coordinates of a spacetime.\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.AbstractRegularCompactObjectSpacetime","page":"Abstract types and traits","title":"Skylight.AbstractRegularCompactObjectSpacetime","text":"AbstractRegularCompactObjectSpacetime <: AbstractSpacetime\n\nSupertype for representing spacetimes containing compact objects without horizons like boson stars. \n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.AbstractRotationSense","page":"Abstract types and traits","title":"Skylight.AbstractRotationSense","text":"AbstractRotationSense\n\nAbstract type for representing the rotation sense of a circular orbit in a spacetime.\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.AbstractSpacetime","page":"Abstract types and traits","title":"Skylight.AbstractSpacetime","text":"AbstractSpacetime\n\nSupertype for representing the geometrical structure of spacetime. Specific implementations of spacetime, such as black holes and regular compact objects, are subtypes of this abstract type.\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.AbstractSpacetimeCache","page":"Abstract types and traits","title":"Skylight.AbstractSpacetimeCache","text":"AbstractSpacetimeCache\n\nAbstract type for caching spacetime-related computations. This can be used as scratch memory in calculations involving the spacetime.\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.CartesianTopology","page":"Abstract types and traits","title":"Skylight.CartesianTopology","text":"CartesianTopology <: AbstractCoordinatesTopology\n\nCartesian coordinates topology.\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.ProgradeRotation","page":"Abstract types and traits","title":"Skylight.ProgradeRotation","text":"ProgradeRotation <: AbstractRotationSense\n\nPrograde rotation sense for a circular orbit in a spacetime.\n\nConstructor\n\nProgradeRotation()\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.RetrogradeRotation","page":"Abstract types and traits","title":"Skylight.RetrogradeRotation","text":"RetrogradeRotation <: AbstractRotationSense\n\nRetrograde rotation sense for a circular orbit in a spacetime.\n\nConstructor\n\nRetrogradeRotation()\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/othertypes/#Skylight.SphericalTopology","page":"Abstract types and traits","title":"Skylight.SphericalTopology","text":"SphericalTopology <: AbstractCoordinatesTopology\n\nSpherical coordinates topology.\n\n\n\n\n\n","category":"type"},{"location":"radiativemodels/radiativeprocesses/#Radiative-processes","page":"Radiative processes","title":"Radiative processes","text":"","category":"section"},{"location":"gettingstarted/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"To get started, you will need a spacetime, a radiative model, and a camera. For example, to instantiate a Kerr spacetime in Kerr-Schild coordinates with mass M=1 and spin aM=05, ","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"using Skylight\n\nspacetime = KerrSpacetimeBoyerLindquistCoordinates(M=1.0,a=0.5)","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"A catalogue of currently available spacetimes is at Catalogue of spacetimes. Next, instantiate a radiative model as, e.g.","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"disk = NovikovThorneDisk(inner_radius=isco_radius(spacetime, ProgradeRotation()), outer_radius = 15.0)","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"See the currently available radiative models at Catalogue of radiative models. Then, you can construct a camera as ","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"camera = PinholeCamera(position = [0.0, 500, π/2-π/20, 0.0],\n                        horizontal_aperture_in_degrees = rad2deg(315/500),\n                        vertical_aperture_in_degrees = rad2deg(315/500),\n                        horizontal_number_of_pixels = 600,\n                        vertical_number_of_pixels = 600)","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"See Pinhole camera for an explanation of this camera setup. Finally, gather these objects into a configurations object. This is a vacuum transport problem, so use","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"configurations = VacuumOTEConfigurations(spacetime=spacetime,\n                                        radiative_model=disk,\n                                        camera = camera,\n                                        unit_mass_in_solar_masses = 1.0)","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"where unit_mass_in_solar_masses is the unit mass in solar masses which determines fully the problem units together with c=G=1, and OTE stands for the observer-to-emitter scheme. This paticular configurations type will get the specialized methods for transport in vacuum. For more general non vacuum problems, use","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"configurations = NonVacuumOTEConfigurations(spacetime = spacetime,\n    camera = camera,\n    radiative_model = model,\n    unit_mass_in_solar_masses = 1.0,\n    observation_energies = exp10.(range(-10, stop = -5.5, length = 20)))","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"Then, create the initial data as","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"initial_data = initialize(configurations)","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"The initial data is a matrix that has the initial conditions for each ray as columns, where the first four components are the spacetime coordinates, and the last four are the components of the initial four-momentum in the coordinate frame. ","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"Before running the ray-tracing, you need to specify a callback to be called at each step of the equations integration. For the default callback, use","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"cb, cbp = callback_setup(configurations)","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"You can also define your own callbacks. For more details, see Callbacks and Event Handling. Finally, you can integrate the equations with","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"sim = integrate(initial_data,\n    configurations,\n    cb,\n    cbp;\n    method = VCABM(),\n    reltol = 1e-8,\n    abstol = 1e-8)","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"You can choose any of the available solver methods from DifferentalEquations.jl.","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"The output data can be obtained as","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"output_data = sim.output_data","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"This matrix contains the final coordinates and momenta of each ray, with the same structure as the initial data. Finally, you can compute, for instance, the observed bolometric intensity of the radiation field and produce an image as","category":"page"},{"location":"gettingstarted/","page":"Getting started","title":"Getting started","text":"using CairoMakie\n\nIobs = observed_bolometric_intensities(initial_data, output_data, configurations)\n\nxs, ys = axes_ranges(camera)\nzs = grid_view(Iobs, configurations)\n\nfig = Figure(font = \"CMU Serif\")\nax = Axis(fig[1, 1],\n    xlabel = L\"\\alpha\",\n    ylabel = L\"\\beta\",\n    ylabelsize = 26,\n    xlabelsize = 26)\nhmap = heatmap!(xs, ys, zs; colormap = :gist_heat, interpolate = true)\nColorbar(fig[:, end + 1],\n    hmap,\n    label = L\"I\",\n    labelsize = 26,\n    width = 15,\n    ticksize = 18,\n    tickalign = 1)\ncolsize!(fig.layout, 1, Aspect(1, 1.0))\ncolgap!(fig.layout, 7)\ndisplay(fig)","category":"page"},{"location":"configurations/configurations/#Configurations","page":"Configurations","title":"Configurations","text":"","category":"section"},{"location":"miscellanea/utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"publications/#Publications","page":"Publications","title":"Publications","text":"","category":"section"},{"location":"publications/","page":"Publications","title":"Publications","text":"This software has been utilized in the following publications:","category":"page"},{"location":"publications/","page":"Publications","title":"Publications","text":"Neto, M. R., Perez, D., & Pelle, J. (2023). The shadow of charged traversable wormholes. International Journal of Modern Physics D, 32(02), 2250137.\nCarrasco, F., Pelle, J., Reula, O., Viganò, D., & Palenzuela, C. (2023). Relativistic force-free models of the thermal X-ray emission in millisecond pulsars observed by NICER. Monthly Notices of the Royal Astronomical Society, 520(2), 3151-3163.\nPelle, J., Reula, O., Carrasco, F., & Bederian, C. (2022). Skylight: a new code for general-relativistic ray-tracing and radiative transfer in arbitrary space–times. Monthly Notices of the Royal Astronomical Society, 515(1), 1316-1327.","category":"page"},{"location":"examples/frkerr/#Thin-accretion-disk-arond-f(R)-Kerr-black-hole","page":"f(R)-Kerr black hole","title":"Thin accretion disk arond f(R)-Kerr black hole","text":"","category":"section"},{"location":"examples/frkerr/","page":"f(R)-Kerr black hole","title":"f(R)-Kerr black hole","text":"using Skylight\nusing CairoMakie\n\nspacetime = FRKerrSpacetime(M = 1.0, a = 0.99, R0 = -0.0012)\n\ndistance = 750\ncamera = PinholeCamera(position = [0.0, distance, π / 2 - π / 20, 0.0],\n    horizontal_aperture_in_degrees = rad2deg(315 / distance),\n    vertical_aperture_in_degrees = rad2deg(315 / distance),\n    horizontal_number_of_pixels = 100,\n    vertical_number_of_pixels = 100)\nmodel = NovikovThorneDisk(inner_radius = 6.0, outer_radius = 18.0)\n\nconfigurations = VacuumOTEConfigurations(spacetime = spacetime,\n    camera = camera,\n    radiative_model = model,\n    unit_mass_in_solar_masses = 1.0)\n\ninitial_data = initialize(configurations)\n\ncb, cbp = callback_setup(configurations; rhorizon_bound = 2e-1) #... or, define your own cb and cbp\n\nrun = integrate(initial_data,\n    configurations,\n    cb,\n    cbp;\n    method = VCABM(),\n    reltol = 1e-13,\n    abstol = 1e-21)\n\noutput_data = run.output_data\n\nIobs = observed_bolometric_intensities(initial_data, output_data, configurations)\n\nxs, ys = axes_ranges(camera)\n\nzs = grid_view(Iobs, configurations)\n\nfig = Figure(font = \"CMU Serif\")\nax = Axis(fig[1, 1],\n    xlabel = L\"\\alpha\",\n    ylabel = L\"\\beta\",\n    ylabelsize = 26,\n    xlabelsize = 26)\nhmap = heatmap!(xs, ys, zs / maximum(zs); colormap = :gist_heat, interpolate = true)\nColorbar(fig[:, end + 1],\n    hmap,\n    label = L\"I\",\n    labelsize = 26,\n    width = 15,\n    ticksize = 18,\n    tickalign = 1)\ncolsize!(fig.layout, 1, Aspect(1, 1.0))\ncolgap!(fig.layout, 7)","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"initialization/pinholecamera/#Pinhole-camera","page":"Pinhole camera","title":"Pinhole camera","text":"","category":"section"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"The energy momentum tensor of the radiation field in terms of the specific intensity is given by","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"T^ab = int k^a k^b left( fracI_nunu^3 right) dV_k ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"where dV_k = nu dnu dOmega. Equivalently,","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"T^a b = int_S^2 int_0^infty n^a n^b I_nu dnu dOmega ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"where n^a = k^a  nu. The radiative flux of energy in the direction of barn^a measured by an osberver with four-velocity u^a is T^a b u_a barn_b.","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"For discretizing this integral at position x^mu, we choose an orthonormal tetrad. We take","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"e_0 = partial_t \ne_1 = -partial_r \ne_2 = partial_phi \ne_3 = -partial_theta ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"and orthonormalize it with respect to g_alpha beta(x^mu), where (rtheta phi) are some topolgically spherical coordinates on the spacetime. Note that this assumes there is a timelike coordinate t and three spacelike coordinates from which there is a meaningful way of transforming to spherical-like coordinates. In flat spacetime, the interpretation of this tetrad is simple: e_1 points towards the origin, e_2 is parallel to the equatorial plane and e_3 is parallel to the z-axis. Note that the triad we use is not direct. Note also that the choice of tetrad does not actually matter. The procedure we choose is sufficiently general to allow (almost) arbitrary spacetime position, flux direction, and observer four-velocity, but it is particularly well suited for large distances in asymptotically flat spacetimes where the source can be covered by a small spherical sector centered around e_1. Finally, we take coordinates (alpha beta) on S^2 such that ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"alpha = varphi \nbeta = pi2 -vartheta","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"where (vartheta varphi) are the usual angular coordinates on S^2. The coordinates range over -π le alpha lt pi and -pi2 le beta le pi2. The tetrad components of a vector in these coordinates can be written as","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"k^0 = nu  \nk^1 = nu cos alpha cos beta \nk^2 = nu sin alpha cos beta \nk^3 = nu sin beta ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"Thus, in particular (alpha beta) = (00) maps to e_1. In these coordinates, dOmega = cos beta dalpha dbeta. We only need to take the (alpha beta) coordinate ranges large enough to cover the image of the emitting source. ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"Finally, we approximate the integral numerically as","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"sum_i j k I_ijk n^a_ij n^b_ij Delta Omega_ij Delta nu      ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"where I_ijk = I_nu_k(n^a_ij), the tetrad components of n^a_ij are ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"1 cos alpha_i cos beta_j sin alpha_i cos beta_j sin beta_j ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"(we have to transform them to the coordinate frame before contraction), the solid angle of each section is","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"Delta Omega_ij = int_D_ij cos beta dalpha dbeta = 2 cos(beta_j) sin left(fracDelta beta2 right) Delta alpha","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"and D_ij = alpha_i-Delta alpha2 alpha_i+Delta alpha2 times beta_j - Delta beta  2 beta_j + Delta beta 2. We took a uniform grid such that ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"alpha_i = -s_alpha2+(i-12)Delta alpha  \nbeta_j = -s_beta2+(j-12)Delta beta \nDelta alpha = s_alphaN_alpha \nDelta beta = s_betaN_beta \n1 le i le N_alpha  \n1 le j le N_beta","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":". ","category":"page"},{"location":"initialization/pinholecamera/","page":"Pinhole camera","title":"Pinhole camera","text":"where s_alpha s_beta are the horizontal and vertical aperture angles respectively, and N_alpha, N_beta are the numbers of pixels. The total solid angle is Delta Omega = 2 sin(s_beta2)s_alpha","category":"page"},{"location":"#Skylight.jl","page":"Home","title":"Skylight.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(The documentation is under construction...)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Skylight.jl is a Julia package for general-relativistic ray-tracing and radiative transfer in curved spacetimes. It works with any spacetime geometry, without the constraints of specific symmetries or the assumption of asymptotic flatness. It is designed with the following goals in mind:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fast computational speed\nHigh accuracy\nEasy extensibility to user-defined spacetimes and radiative models","category":"page"},{"location":"","page":"Home","title":"Home","text":"It uses automatic differentiation from ForwardDiff.jl to compute the Christoffel symbols from the spacetime metric, and has built-in multithreading parallelism. At its core, Skylight simultaneously solves the geodesic equations and the covariant transport equations along the geodesics, i.e.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracmathopd^2 x^alphamathopdlambda^2+Gamma^alpha_mu nu fracmathopd x^mumathopdlambda fracmathopd x^numathopdlambda=0 ","category":"page"},{"location":"","page":"Home","title":"Home","text":"where Gamma^alpha_mu nu are the Christoffel symbols of the spacetime, x^alpha is the position and lambda is an affine parameter along the geodesic, together with","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracmathopdmathopdlambda left( fracI_nunu^3right) = fracj_nunu^2 - nu alpha_nu left( fracI_nunu^3right) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"where nu is the frequency, I_nu is the intensity of the radiation field, and j_nu and alpha_nu are the emissivity and absorptivity coefficients of the medium, respectively. Skylight has a special treatment for surface emission models with transport in vacuum, like geometrically-thin accretion disks, where the transport can be reduced to the connection of the intensity of the radiation field between the emission and observation points using a Lorentz and geodesic invariant I_nu  nu^3. The inegration of the equations is performed with DifferentialEquations.jl. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a quick start guide, see Getting started. Here is the full API (both the start guide and the API are under construction). Find the source code here. ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"#Supported-spacetimes","page":"Home","title":"Supported spacetimes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Minkowski spacetime\nSchwarzschild spacetime\nKerr spacetime\nJohannsen spacetime\nf(R)-Kerr spacetime\nRuffini-Argüelles-Rueda spacetime for fermionic dark matter\nBoson star spacetimes with quartic self-interaction and solitonic potentials  \nExtensibility to user-defined spacetimes","category":"page"},{"location":"#Radiative-models","page":"Home","title":"Radiative models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Shakura-Sunyaev accretion disks\nGeometrically-thin optically-thick accretion disks with user-provided tabulated temperatures\nIon tori with synchrotron and bremsstrahlung emission \nLine emission from accretion disks with user-provided emissivity profiles\nLamppost corona emission and accretion disk illumination profiles\nExtensibility to user-defined radiative models","category":"page"},{"location":"#Geometric-and-dynamical-tools","page":"Home","title":"Geometric and dynamical tools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Spacetime metrics, inverse metrics, volume elements, Christoffel symbols, etc.\nFour-vector scalar products, index raising/lowering, orthogonal projection, normalization, etc.\nConstants of motion in spacetimes with symmetries\nCharacteristic radii, like event horizons, ISCOs, etc. \nSpacetime geodesics integration","category":"page"},{"location":"#Radiative-transfer","page":"Home","title":"Radiative transfer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Radiative transfer in vacuum and in emissive/absorptive media","category":"page"},{"location":"#Observable-quantities","page":"Home","title":"Observable quantities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Bolometric and specific intensities\nFluxes through arbitrarily oriented surface elements\nImages and spectra\nGeneric observation frames (any position and four-velocity)","category":"page"},{"location":"#Utilities","page":"Home","title":"Utilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Loading/saving data and configurations from/to HDF5 files\nUnits and dimensions management","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia version at least 1.6","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is not yet available in the Julia registries. To install it, follow these steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Clone the repository: git clone https://github.com/joaquinpelle/Skylight.jl.git\nOpen the Julia REPL and enter package mode by typing ].\nAdd Skylight to your Pkg environment: ] dev \\path\\to\\the\\repository\nImport Skylight: using Skylight","category":"page"},{"location":"#Folder-contents","page":"Home","title":"Folder contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":".\n├── docs                    # Documentation files\n├── run                     # Example scripts and notebooks to run the code\n├── src                     # Source files\n├── test                    # Test files \n│   ├── benchmarks          # Load and stress tests\n│   ├── integration         # End-to-end, integration tests\n│   └── unit                # Unit tests","category":"page"},{"location":"#To-run-the-unit-tests","page":"Home","title":"To run the unit tests","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In your terminal, go to the package directory \nOpen the Julia REPL\nGo to the package mode by typing ]\nActivate the package environment by running the command activate .\nIn the package mode, run the command test","category":"page"},{"location":"#To-cite-this-work","page":"Home","title":"To cite this work","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use this software in your work, we kindly request that you cite the following paper","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{pelle2022skylight,\n  title={Skylight: a new code for general-relativistic ray-tracing and radiative transfer in arbitrary space--times},\n  author={Pelle, Joaquin and Reula, Oscar and Carrasco, Federico and Bederian, Carlos},\n  journal={Monthly Notices of the Royal Astronomical Society},\n  volume={515},\n  number={1},\n  pages={1316--1327},\n  year={2022},\n  publisher={Oxford University Press}\n}","category":"page"},{"location":"citing/#Citing","page":"Citing","title":"Citing","text":"","category":"section"},{"location":"citing/","page":"Citing","title":"Citing","text":"If you use this software in your work, please cite the following paper","category":"page"},{"location":"citing/","page":"Citing","title":"Citing","text":"@article{pelle2022skylight,\n  title={Skylight: a new code for general-relativistic ray-tracing and radiative transfer in arbitrary space--times},\n  author={Pelle, Joaquin and Reula, Oscar and Carrasco, Federico and Bederian, Carlos},\n  journal={Monthly Notices of the Royal Astronomical Society},\n  volume={515},\n  number={1},\n  pages={1316--1327},\n  year={2022},\n  publisher={Oxford University Press}\n}","category":"page"},{"location":"radiativetransfer/radiativetransfer/#Radiative-transfer","page":"Radiative transfer","title":"Radiative transfer","text":"","category":"section"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"examples/corona_kerr/#Lamppost-corona-above-a-Kerr-black-hole","page":"Lamppost corona above a Kerr black hole","title":"Lamppost corona above a Kerr black hole","text":"","category":"section"},{"location":"examples/corona_kerr/","page":"Lamppost corona above a Kerr black hole","title":"Lamppost corona above a Kerr black hole","text":"using Skylight\nusing CairoMakie\nusing Printf\n\nspacetime = KerrSpacetimeBoyerLindquistCoordinates(M=1.0, a=0.0)\ndisk = NovikovThorneDisk(inner_radius = isco_radius(spacetime, ProgradeRotation()), outer_radius = 100.0)\ncorona = LamppostCorona(height=height, theta_offset=1e-5, spectral_index = 2.0)\nconfigurations = VacuumETOConfigurations(spacetime=spacetime,\n                                radiative_model = corona,\n                                number_of_points=1,\n                                number_of_packets_per_point = npp, \n                                max_radius = 110.0,\n                                unit_mass_in_solar_masses=1.0)\ninitial_data = initialize(configurations)\ncbp = callback_parameters(spacetime, disk, configurations; rhorizon_bound=2e-3)\ncb = callback(spacetime, disk)\nsim = integrate(initial_data, configurations, cb, cbp; method=VCABM(), reltol=1e-5, abstol=1e-5)\noutput_data = sim.output_data\n\nI, bins_midpoints = emissivity_profile(output_data, spacetime, disk, corona)\n\nfig = Figure(resolution=(400,400))\nax = Axis(fig[1,1])\nlines!(ax, bins_midpoints, I)\nax.xscale = log10\nax.yscale = log10\n# xlims!(1.0,200)\n# ylims!(1e-6, 1e0)\nax.xtickformat = \"{:.1f}\"\ndisplay(fig)","category":"page"},{"location":"radiativemodels/radiativemodels/#Radiative-models","page":"Radiative models","title":"Radiative models","text":"","category":"section"},{"location":"faq/#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"radiativemodels/catalogue/#Catalogue-of-radiative-models","page":"Catalogue","title":"Catalogue of radiative models","text":"","category":"section"},{"location":"spacetimes/functions/#Geometric-functions","page":"Geometric functions","title":"Geometric functions","text":"","category":"section"},{"location":"spacetimes/functions/","page":"Geometric functions","title":"Geometric functions","text":"metric(position::AbstractVector, spacetime::AbstractSpacetime)\nmetric_inverse(position::AbstractVector, spacetime::AbstractSpacetime)\nvolume_element(position::AbstractVector, spacetime::AbstractSpacetime)\nchristoffel(position::AbstractVector, spacetime::AbstractSpacetime)","category":"page"},{"location":"spacetimes/functions/#Skylight.metric-Tuple{AbstractVector, AbstractSpacetime}","page":"Geometric functions","title":"Skylight.metric","text":"metric(position::AbstractVector, spacetime::AbstractSpacetime)\n\nEvaluate the spacetime metric at the given position and return the result.\n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Skylight.metric_inverse-Tuple{AbstractVector, AbstractSpacetime}","page":"Geometric functions","title":"Skylight.metric_inverse","text":"metric_inverse(position::AbstractVector, spacetime::AbstractSpacetime)\n\nEvaluate the inverse of the metric at the given position and return the result.\n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Skylight.volume_element-Tuple{AbstractVector, AbstractSpacetime}","page":"Geometric functions","title":"Skylight.volume_element","text":"volume_element(position::AbstractVector, spacetime::AbstractSpacetime)\n\nCompute sqrt-textdet(g) at the given position \n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Skylight.christoffel-Tuple{AbstractVector, AbstractSpacetime}","page":"Geometric functions","title":"Skylight.christoffel","text":"christoffel(position::AbstractVector, spacetime::AbstractSpacetime)\n\nEvaluate the Christoffel symbols of the second kind at the given position and return the result as a 4x4x4 array  Γ, where Γ[α,μ,ν] corresponds to \n\nGamma^alpha_mu nu = frac12 g^alpha rho(partial_mu g_rho nu + partial_nu g_rho mu - partial_rho g_mu nu)\n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Non-allocating-methods","page":"Geometric functions","title":"Non-allocating methods","text":"","category":"section"},{"location":"spacetimes/functions/","page":"Geometric functions","title":"Geometric functions","text":"For non-allocating versions to be used within tight loops, use the following methods ","category":"page"},{"location":"spacetimes/functions/","page":"Geometric functions","title":"Geometric functions","text":"metric!(metric::AbstractMatrix, position::AbstractVector, spacetime::AbstractSpacetime, cache::Union{Nothing, AbstractSpacetimeCache})\nmetric_inverse!(metric::AbstractMatrix, position::AbstractVector, spacetime::AbstractSpacetime, g::AbstractMatrix, cache::Union{Nothing, AbstractSpacetimeCache})\nvolume_element(position::AbstractVector, spacetime::AbstractSpacetime, g::AbstractMatrix, cache::Union{Nothing, AbstractSpacetimeCache})\nchristoffel!(metric::AbstractMatrix, position::AbstractVector, spacetime::AbstractSpacetime, cache::Union{Nothing, AbstractChristoffelCache})","category":"page"},{"location":"spacetimes/functions/#Skylight.metric!-Tuple{AbstractMatrix, AbstractVector, AbstractSpacetime, Union{Nothing, AbstractSpacetimeCache}}","page":"Geometric functions","title":"Skylight.metric!","text":"metric!(g::AbstractMatrix, position::AbstractVector, spacetime::AbstractSpacetime, cache::Union{Nothing, AbstractSpacetimeCache})\n\nEvaluate the spacetime metric at the given position and store the result in g using cache for temporary storage.  \n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Skylight.metric_inverse!-Tuple{AbstractMatrix, AbstractVector, AbstractSpacetime, AbstractMatrix, Union{Nothing, AbstractSpacetimeCache}}","page":"Geometric functions","title":"Skylight.metric_inverse!","text":"metric_inverse!(ginv::AbstractMatrix, position::AbstractVector, spacetime::AbstractSpacetime, g::AbstractMatrix, cache::Union{Nothing, AbstractSpacetimeCache})\n\nEvaluate the inverse of the metric at the given position  and store the result in the given array, using g and cache for temporary storage, which must be preallocated as g = zeros(4,4) and cache = allocate_cache(spacetime).\n\nSee also allocate_cache. \n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Skylight.volume_element-Tuple{AbstractVector, AbstractSpacetime, AbstractMatrix, Union{Nothing, AbstractSpacetimeCache}}","page":"Geometric functions","title":"Skylight.volume_element","text":"volume_element(position::AbstractVector, spacetime::AbstractSpacetime, g::AbstractMatrix, cache::Union{Nothing, AbstractSpacetimeCache})\n\nCompute sqrt-textdet(g) at the given position, using g and cache for temporary storage, which must be preallocated as g = zeros(4,4) and cache = allocate_cache(spacetime). \n\nSee also allocate_cache. \n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Skylight.christoffel!-Tuple{AbstractMatrix, AbstractVector, AbstractSpacetime, Union{Nothing, AbstractChristoffelCache}}","page":"Geometric functions","title":"Skylight.christoffel!","text":"christoffel!(Γ::AbstractArray, position::AbstractVector, spacetime::AbstractSpacetime, cache::Union{Nothing,AbstractChristoffelCache})\n\nEvaluate the Christoffel symbols of the second kind at the given position and store the result in Γ, where Γ[α,μ,ν] corresponds to \n\nGamma^alpha_mu nu = frac12 g^alpha rho(partial_mu g_rho nu + partial_nu g_rho mu - partial_rho g_mu nu)\n\nThe cache must be preallocated as cache = allocate_christoffel_cache(spacetime).\n\nSee also allocate_christoffel_cache.\n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Cache-allocation","page":"Geometric functions","title":"Cache allocation","text":"","category":"section"},{"location":"spacetimes/functions/","page":"Geometric functions","title":"Geometric functions","text":"allocate_cache(spacetime::AbstractSpacetime)\nallocate_christoffel_cache(spacetime::AbstractSpacetime)","category":"page"},{"location":"spacetimes/functions/#Skylight.allocate_cache-Tuple{AbstractSpacetime}","page":"Geometric functions","title":"Skylight.allocate_cache","text":"allocate_cache(spacetime::AbstractSpacetime)\n\nAllocate a cache object for the given spacetime. The cache object is used to store temporary data in spacetime-related calculations.\n\n\n\n\n\n","category":"method"},{"location":"spacetimes/functions/#Skylight.allocate_christoffel_cache-Tuple{AbstractSpacetime}","page":"Geometric functions","title":"Skylight.allocate_christoffel_cache","text":"allocate_christoffel_cache(spacetime::AbstractSpacetime)\n\nAllocate a cache object for Christoffel symbols calculations.\n\nSee also christoffel!. \n\n\n\n\n\n","category":"method"},{"location":"spacetimes/catalogue/#Catalogue-of-spacetimes","page":"Catalogue","title":"Catalogue of spacetimes","text":"","category":"section"},{"location":"spacetimes/catalogue/#Minkowski-spacetime","page":"Catalogue","title":"Minkowski spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Modules = [Skylight]\nFilter = t -> typeof(t) === DataType && t <: Skylight.AbstractMinkowskiSpacetime && isconcretetype(t)","category":"page"},{"location":"spacetimes/catalogue/#Skylight.MinkowskiSpacetimeCartesianCoordinates","page":"Catalogue","title":"Skylight.MinkowskiSpacetimeCartesianCoordinates","text":"MinkowskiSpacetimeCartesianCoordinates <: AbstractMinkowskiSpacetime\n\nMinkowski Spacetime in spherical coordinates. \n\nds^2 = -dt^2 + dx^2 + dy^2 + dz^2\n\nConstructor\n\nMinkowskiSpacetimeCartesianCoordinates()\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Skylight.MinkowskiSpacetimeSphericalCoordinates","page":"Catalogue","title":"Skylight.MinkowskiSpacetimeSphericalCoordinates","text":"MinkowskiSpacetimeSphericalCoordinates <: AbstractMinkowskiSpacetime\n\nMinkowski Spacetime in spherical coordinates. \n\nds^2 = -dt^2 + dr^2 + r^2 dtheta^2 + r^2 sin^2 theta dphi^2\n\nwhere r is the radial coordinate and θ is the polar angle.\n\nConstructor\n\nMinkowskiSpacetimeSphericalCoordinates()\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Schwarzschild-spacetime","page":"Catalogue","title":"Schwarzschild spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Modules = [Skylight]\nFilter = t -> typeof(t) === DataType && t <: Skylight.AbstractSchwarzschildSpacetime && isconcretetype(t)","category":"page"},{"location":"spacetimes/catalogue/#Skylight.SchwarzschildSpacetimeKerrSchildCoordinates","page":"Catalogue","title":"Skylight.SchwarzschildSpacetimeKerrSchildCoordinates","text":"SchwarzschildSpacetimeKerrSchildCoordinates <: AbstractSchwarzschildSpacetime\n\nSchwarzschild spacetime in Kerr-Schild coordinates. The parameter M is the mass. The metric is\n\ng_mu nu = eta_mu nu + H l_mu l_nu\n\nwhere eta_mu nu is the flat metric, H=2Mr, and l_mu=(1xyz)r.\n\nConstructor\n\nSchwarzschildSpacetimeKerrSchildCoordinates(M=1.0)\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Skylight.SchwarzschildSpacetimeSphericalCoordinates","page":"Catalogue","title":"Skylight.SchwarzschildSpacetimeSphericalCoordinates","text":"SchwarzschildSpacetimeSphericalCoordinates <: AbstractSchwarzschildSpacetime\n\nSchwarzschild spacetime in spherical coordinates. The metric is\n\nds^2 = -(1-2Mr) dt^2 + (1-2Mr)^-1 dr^2 + r^2 dtheta^2 + r^2 sin^2 theta dphi^2\n\nConstructor\n\nSchwarzschildSpacetimeSphericalCoordinates(M=1.0)\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Kerr-spacetime","page":"Catalogue","title":"Kerr spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Modules = [Skylight]\nFilter = t -> typeof(t) === DataType && t <: Skylight.AbstractKerrSpacetime && isconcretetype(t)","category":"page"},{"location":"spacetimes/catalogue/#Skylight.KerrSpacetimeBoyerLindquistCoordinates","page":"Catalogue","title":"Skylight.KerrSpacetimeBoyerLindquistCoordinates","text":"KerrSpacetimeBoyerLindquistCoordinates <: AbstractKerrSpacetime\n\nKerr spacetime in Boyer-Lindquist coordinates. The parameter are the mass M and the  dimensionless spin a. \n\nConstructor\n\nKerrSpacetimeBoyerLindquistCoordinates(M=1.0, a=0.99)\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Skylight.KerrSpacetimeKerrSchildCoordinates","page":"Catalogue","title":"Skylight.KerrSpacetimeKerrSchildCoordinates","text":"KerrSpacetimeKerrSchildCoordinates <: AbstractKerrSpacetime\n\nKerr spacetime in Kerr-Schild coordinates. The parameter are the mass M and the  dimensionless spin a. The metric is\n\ng_mu nu = eta_mu nu + H l_mu l_nu\n\nwhere eta_mu nu is the flat metric, H=2Mr^3(r^4+a^2 z^2, and \n\nl_mu=(1fracrx+ayr^2+a^2fracry-axr^2+a^2zr)\n\nwhere r satisfies the equation\n\nfracx^2+y^2r^2+a^2 + fracz^2r^2 = 1\n\nConstructor\n\nKerrSpacetimeKerrSchildCoordinates(M=1.0, a=0.99)\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Johannsen-spacetime","page":"Catalogue","title":"Johannsen spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Skylight.JohannsenSpacetime","category":"page"},{"location":"spacetimes/catalogue/#Skylight.JohannsenSpacetime","page":"Catalogue","title":"Skylight.JohannsenSpacetime","text":"JohannsenSpacetime <: AbstractBlackHoleSpacetime\n\nJohannsen spacetime to lowest order in the  deformation parameters with respect to the Kerr metric\n\nConstructor\n\nJohannsenSpacetime(M=1.0, a=0.99, α13=0.5, α22=0.0, α52=0.01, ϵ3=0.0)\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#f(R)-Kerr-spacetime","page":"Catalogue","title":"f(R)-Kerr spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Skylight.FRKerrSpacetime","category":"page"},{"location":"spacetimes/catalogue/#Skylight.FRKerrSpacetime","page":"Catalogue","title":"Skylight.FRKerrSpacetime","text":"FRKerrSpacetime <: AbstractBlackHoleSpacetime\n\nf(R)-Kerr spacetime  (uncharged) with constant curvature R_0\n\nConstructor\n\nFRKerrSpacetime(M=1.0, a=0.99, R0=-0.0012) \n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Charged-wormhole-spacetime","page":"Catalogue","title":"Charged wormhole spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Modules = [Skylight]\nFilter = t -> typeof(t) === DataType && t <: Skylight.AbstractChargedWormholeSpacetime && isconcretetype(t)","category":"page"},{"location":"spacetimes/catalogue/#Skylight.ChargedWormholeSpacetimeRegularCoordinates","page":"Catalogue","title":"Skylight.ChargedWormholeSpacetimeRegularCoordinates","text":"ChargedWormholeSpacetimeRegularCoordinates <: AbstractSpacetime\n\nCharged wormhole spacetime  in regular (throat crossing) coordinates.\n\nConstructor\n\nChargedWormholeSpacetimeRegularCoordinates(b0=1.0, Q=0.5)\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Skylight.ChargedWormholeSpacetimeSphericalCoordinates","page":"Catalogue","title":"Skylight.ChargedWormholeSpacetimeSphericalCoordinates","text":"ChargedWormholeSpacetimeSphericalCoordinates <: AbstractSpacetime\n\nCharged wormhole spacetime  in usual spherical coordinates.\n\nConstructor\n\nChargedWormholeSpacetimeSphericalCoordinates(b0=1.0, Q=0.5)\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#RAR-spacetime","page":"Catalogue","title":"RAR spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Skylight.RARSpacetime","category":"page"},{"location":"spacetimes/catalogue/#Skylight.RARSpacetime","page":"Catalogue","title":"Skylight.RARSpacetime","text":"RARSpacetime <: AbstractRegularCompactObjectSpacetime\n\nRuffini-Arguelles-Rueda spacetime for dark-matter galactic core-halo. The spacetime is constructed by interpolating the data files in a given directory. The numerical data must include the r, g_tt, g_rr, partial_r nu, M(r) and partial_r M as columns in that order. The data must be in geometrized  units.\n\nConstructor\n\nRARSpacetime(\"./rar_data\")\n\n\n\n\n\n","category":"type"},{"location":"spacetimes/catalogue/#Boson-star-spacetime","page":"Catalogue","title":"Boson star spacetime","text":"","category":"section"},{"location":"spacetimes/catalogue/","page":"Catalogue","title":"Catalogue","text":"Skylight.BosonStarSpacetime","category":"page"},{"location":"spacetimes/catalogue/#Skylight.BosonStarSpacetime","page":"Catalogue","title":"Skylight.BosonStarSpacetime","text":"BosonStarSpacetime <: AbstractRegularCompactObjectSpacetime\n\nBoson star spacetime in spherical coordinates. It uses analyical fits. Either the  fit parameters as described in... can be provided as vectors, or any of the symbols :LBS1,  :LBS2, :LBS3, :SBS1, :SBS2 or :SBS3 as constructor arguments\n\nConstructors\n\nBosonStarSpacetime(a=aparams, b=bparams) \nBosonStarSpacetime(:LBS1)\n\n\n\n\n\n","category":"type"},{"location":"initialization/imageplane/#Image-plane","page":"Image plane","title":"Image plane","text":"","category":"section"},{"location":"initialization/imageplane/","page":"Image plane","title":"Image plane","text":"When the observer is far away from the source in an asymptotically flat spacetime, the image of the source is a small region of the celestial sphere. The image plane is the plane tangent to the celestial sphere at the observer's position. In that case, the rays can be assumed to be almost parallel, and the angular integral can be reparameterized in terms of impact parameters. This was Skylight's original construction, as it is described in its paper, but this version will be deprecated, since it is much less general, and it is not much faster than the general version that allows for arbitrary observation position and four-velocity.","category":"page"},{"location":"examples/skylightlogo/#Skylight-logo","page":"Skylight's logo","title":"Skylight logo","text":"","category":"section"},{"location":"examples/skylightlogo/","page":"Skylight's logo","title":"Skylight's logo","text":"Skylight logo is produced with Skylight itself, mapping the three-dots Julia logo onto a screen behind a Kerr black hole and ray tracing the image for an observer aligned with the black hole and the screen. Play with the logo by changing the parameters of the configuration in the following snippet, where you need to replace original_image = load(\"julia-logo.png\") with the path to your own image file:","category":"page"},{"location":"examples/skylightlogo/","page":"Skylight's logo","title":"Skylight's logo","text":"\nusing Skylight\nusing Images\n\nfunction main(original_image,\n    filename;\n    spin = 0.0,\n    d_obs_screen,\n    rel_bh_pos,\n    bh_size,\n    xaperture,\n    n_factor = 1)\n    nx, ny = size(original_image)\n\n    obs_x = d_obs_screen * (1 - rel_bh_pos)\n    xscreen = obs_x - d_obs_screen\n    # xaperture = 60\n    ximage = 1.0 / bh_size\n\n    Nx = floor(Int, nx * n_factor)\n    Ny = floor(Int, ny * n_factor)\n\n    spacetime = KerrSpacetimeKerrSchildCoordinates(M = 1.0, a = spin)\n    camera = PinholeCamera(position = [0.0, obs_x, 0.0, 0.0],\n        horizontal_aperture_in_degrees = xaperture, #rad2deg(70/distance),\n        vertical_aperture_in_degrees = (ny / nx) * xaperture, #rad2deg(70/distance),\n        horizontal_number_of_pixels = Nx,\n        vertical_number_of_pixels = Ny)\n    model = VerticalScreen(x = xscreen,\n        horizontal_side = ximage,\n        vertical_side = (ny / nx) * ximage)\n    configurations = VacuumOTEConfigurations(spacetime = spacetime,\n        camera = camera,\n        radiative_model = model,\n        unit_mass_in_solar_masses = 1.0)\n    initial_data = initialize(configurations)\n    cb, cbp = callback_setup(configurations; rmax = 500.0, rhorizon_bound = 2e-1) #... or, define your own cb and cbp\n    run = integrate(initial_data,\n        configurations,\n        cb,\n        cbp;\n        method = VCABM(),\n        reltol = 1e-13,\n        abstol = 1e-21)\n    output_data = run.output_data\n\n    # Create a new blank image with the same size as the original image\n    new_image = imresize(original_image, (Nx, Ny))\n\n    for j in 1:Ny\n        for i in 1:Nx\n            ipx = (j - 1) * Nx + i\n            x, y, z = output_data[2:4, ipx]\n            if !(x ≈ model.x) || abs(y) > 0.5 * model.horizontal_side ||\n               abs(z) > 0.5 * model.vertical_side\n                new_image[i, j] = zero(eltype(original_image))\n                continue\n            end\n\n            in = floor(Int,\n                1 + nx * (y + 0.5 * model.horizontal_side) / model.horizontal_side)\n            jn = floor(Int, 1 + ny * (z + 0.5 * model.vertical_side) / model.vertical_side)\n\n            if 1 <= in <= size(new_image, 1) && 1 <= jn <= size(new_image, 2)\n                # Copy the pixel value from the original image to the new image\n                new_image[i, j] = original_image[in, jn]\n            else\n                println(\"Pixel ($i, $j) is outside the new image, warning\")\n            end\n        end\n    end\n\n    # Save the new image\n    # display(new_image)\n    save(filename, new_image)\nend\n\noriginal_image = load(\"julia-logo.png\")\nspin = 0.0\nobs_x = 40.0\nxscreen = -20.0\nximage = 30.0\nxaperture = 60\nn_factor = 1\n\nmain(original_image,\n    \"logo.png\";\n    d_obs_screen = 230.0,\n    rel_bh_pos = 3 / 23,\n    bh_size = 1 / 15.0,\n    xaperture = 10,\n    n_factor = 3)","category":"page"},{"location":"examples/torus_kerr/#Ion-torus-in-Kerr-spacetime","page":"Ion torus around a Kerr black hole","title":"Ion torus in Kerr spacetime","text":"","category":"section"},{"location":"examples/torus_kerr/","page":"Ion torus around a Kerr black hole","title":"Ion torus around a Kerr black hole","text":"\nusing Skylight\nusing CairoMakie\n\ndistance = 500\nN = 400\nspacetime = KerrSpacetimeBoyerLindquistCoordinates(M = 1.0, a = 0.5)\ncamera = PinholeCamera(position = [0.0, distance, π * (1 / 2 - 1 / 18), 0.0],\n    horizontal_aperture_in_degrees = rad2deg(atan(20 / distance)),\n    vertical_aperture_in_degrees = rad2deg(atan(20 / distance)),\n    horizontal_number_of_pixels = N,\n    vertical_number_of_pixels = N)\nmodel = IonTorus(spacetime)\nconfigurations = NonVacuumOTEConfigurations(spacetime = spacetime,\n    camera = camera,\n    radiative_model = model,\n    unit_mass_in_solar_masses = 1.0,\n    observation_energies = exp10.(range(-10, stop = -5.5, length = 20)))\ninitial_data = initialize(configurations)\ncb, cbp = callback_setup(configurations; rhorizon_bound = 2e-1) #... or, define your own cb and cbp\nrun = integrate(initial_data,\n    configurations,\n    cb,\n    cbp;\n    method = VCABM(),\n    reltol = 1e-8,\n    abstol = 1e-8)\noutput_data = run.output_data\n\n#Image\nxs, ys = axes_ranges(camera)\nzs = grid_view(output_data, configurations; energy_index = 1)\n\nzs[zs .< 1e-40] .= 1e-40\nzs = log10.(zs)\nlogzmin = minimum(zs[zs .> -40])\nlogzmax = maximum(zs)\n\nfig = Figure(font = \"CMU Serif\") #resolution=(600,400)\nax = Axis(fig[1, 1],\n    xlabel = L\"\\alpha\",\n    ylabel = L\"\\beta\",\n    ylabelsize = 26,\n    xlabelsize = 26)\nhmap = heatmap!(xs,\n    ys,\n    zs;\n    colormap = :gist_heat,\n    interpolate = true,\n    colorrange = (logzmax - 10, logzmax))\nColorbar(fig[:, end + 1],\n    hmap,\n    label = L\"I\",\n    labelsize = 26,\n    width = 15,\n    ticksize = 18,\n    tickalign = 1)\ncolsize!(fig.layout, 1, Aspect(1, 1.0))\ncolgap!(fig.layout, 7)\nCairoMakie.save(\"torus_image.png\", fig)\n\n#Spectrum\nF = spectrum(initial_data, output_data, configurations)\nν = erg_to_Hz(configurations.observation_energies)\n\nfig = Figure()\nax = Axis(fig[1, 1],\n    xlabel = L\"\\nu \\, [\\text{Hz}]\",\n    ylabel = L\"\\nu F_{\\nu} \\,[\\text{erg} \\,\\text{s}^{-1}\\,\\text{Hz}^{-1}]\",\n    xscale = log10,\n    yscale = log10,\n    xlabelsize = 26,\n    ylabelsize = 26)\nlines!(ax, ν, ν .* Hz_to_erg(F); linewidth = 2.0, color = :blue)\nCairoMakie.save(\"torus_spectrum.png\", fig)\ndisplay(fig)\n\n#Potential\npotential = (x, z) -> Skylight.torus_normalized_potential([\n        0.0,\n        sqrt(x^2 + z^2),\n        acos(z / sqrt(x^2 + z^2)),\n        0.0,\n    ],\n    spacetime,\n    model)\n\nsize = 10\nN = 200\nx_vals = LinRange(0.0, size, N)\nz_vals = LinRange(0.0, size, N)\nw_vals = [potential(x, z) for x in x_vals, z in z_vals]\n\nw_vals[w_vals .< 0.0] .= 1e-40\nwmin = minimum(w_vals[w_vals .> 1e-40])\nwmax = maximum(w_vals)\n\nfig = Figure()\nax = Axis(fig[1, 1])\nimg = heatmap!(x_vals,\n    z_vals,\n    log10.(w_vals),\n    colormap = cmap,\n    interpolate = true,\n    colorrange = (log10(wmin), log10(wmax)))\n\ncbar = Colorbar(fig[1, 2], img, label = \"Normalized potential\", ticklabelpad = 10) \nfig","category":"page"},{"location":"initialization/initialization/#Initialization","page":"Initialization","title":"Initialization","text":"","category":"section"},{"location":"miscellanea/misc/#Miscellanea","page":"Miscellanea","title":"Miscellanea","text":"","category":"section"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"In the observer-to-emitter scheme the initial momenta are past-directed and pointing inwards. To see why this is valid cosider the following: the Lioville vector field on the tangent bundle of spacetime is the vector field which generates the geodesic flow. The component of this field along the fibers is invariant to sign inversion on the fiber. This means that the geodesic passing through the point (x^μk^μ) and the one passing through (x^μ-k^μ) project to the same curve on the base spacetime. We do it this way so the geodesic integrator kernel is common to both transport schemes. Otherwise, although the physical equations would be the same, the numerical integrators would have to be different because we would have to take backward steps in the observer-to-emitter case. Once we have the solutions, we can invert the sign of k^μ if necessary when we use it elsewhere. ","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"ispositionat_source should't be used in condition/affect. Its purpose is to classify the endstate of a geodesic already stopped, not to condition the geodesic integration.","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"Callback params needs to have an rmax.","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"Coordinates are assumed to be have either cartesian or spherical topology, and to be ordered like (t r theta varphi) or (t x y z). The first coordinate is assumed to be temporal, and the other three spatial. This is checked for in the initialization via the metric signature.","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"AbstractAccretionDisk assumes innerradius and outerradius as fields.","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"The integrator can integrate geodesics of any kind (timelike and spacelike too)","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"Custom initial data can be provided as well to the integrator as an array of size (8 N) where N is the number of rays.","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"The intensity integrated in non-vacuum is the invariant intensity","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"The emissivity must take vectors of energies as inputs","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"Setting the absorptovity function to return nothing is equivalent to setting the absorptivity to zero","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"The non-vacuum transfer equations only work towards the past because of rest frame energy sign assumption. This will be generalized.","category":"page"},{"location":"miscellanea/misc/","page":"Miscellanea","title":"Miscellanea","text":"Observation energies in non-vacuum are assumed to be in CGS.","category":"page"},{"location":"miscellanea/porting_from_c/#Tips-for-porting-a-metric-from-C","page":"Tips for porting a metric from C","title":"Tips for porting a metric from C","text":"","category":"section"},{"location":"miscellanea/porting_from_c/","page":"Tips for porting a metric from C","title":"Tips for porting a metric from C","text":"Change function to metric! and arguments to g, position, spacetime\nExtract t,x,y,z = position\nRemove all variable declarations\nRemove all remaining double\nRemove all ; (be careful there are no two or more commands in one line)\nReplace all // by  (checkout for C macros before)\nReplace result[i] by resulti\nUse regular expressions to replace pow(base, exp) as follows: 8.1. Find pow(([^,]),\\s([^)]+)) using Reg Ex 8.2. Replace by (1)^(2) \nReplace gcov by g (just for consistency)\nReplace return\" by return nothing\"\nRemove all unused variables \nIn case of keeping arrays, shift indexes because Julia is 1-based (whereas C is 0-based)  To do this you can search for the regular expression (\\w+)[\\s(\\d+)\\s] and replace by 12+1]  After that you can search all (1+1) and replace by 2 and so on.  In case there is [][] or other type of indexing you need to generalize the RegEx\nRemove final } and add end\nReplace ++ by +=1\nReplace integers that are used in ifs and whiles by booleans (or minimally you can change by e.g. while(keep_iterating==1)) and then replace keep_iterating=1 by keep_iterating=true and keep_iterating=0 by keep_iterating=false","category":"page"},{"location":"radiativetransfer/callbacks/#Callbacks","page":"Callbacks","title":"Callbacks","text":"","category":"section"},{"location":"postprocess/postprocess/#Postprocess","page":"Postprocess","title":"Postprocess","text":"","category":"section"}]
}
